
#Рекуррентная сеть Хопфилда
#1 слой нейронов; функция активации sign; кол-во нейронов равно размерности входных векторов (100);

import numpy as np

class HopfieldNetwork:

    def __init__(self, num_neurons: int) -> None:
        """
        Функция, которая инициализирует нейронную сеть в виде матрицы весов нейронов
        Args: num_neurons - число нейронов в сети
        Return: отсутствует
        """
        self.num_neurons = num_neurons
        self.weights = np.zeros((self.num_neurons, self.num_neurons))

    def train(self, patterns: list[list[list], list[list]]) -> None:
        """
        Функция, которая обучает нейроны на базовых "чистых" примерах
        Args: patterns - список матриц
        Return: отсутствует
        """
        for pattern in patterns:
            pattern = np.array(pattern)
            self.weights += pattern
            #устанавливаем 0 по диагонали, чтобы нейроны как-то там сами себя не активировали
            np.fill_diagonal(self.weights, 0)
    
    def recall(self, pattern: list, max_iter=100) -> list:
        """
        Функция, которая пытается восстановить полученный паттерн
        Args: pattern - строка матрицы, max_iter - максимально допустимое число итераций
        Return: последний полученный паттерн (под таким паттерном имеется в виду либо тот, который совпал с изначальным, либо полученный на 100 итерации)
        """
        pattern = np.array(pattern)
        for _ in range(max_iter):
            new_pattern = np.sign(np.dot(pattern, self.weights))
            if np.array_equal(new_pattern, pattern):
                return new_pattern
            pattern = new_pattern
        return pattern

#1 пример - собака, 2-5 - одна и та же буква И (нужно для корректной работы алгоритма сравнения, лучше не придумал)
examples = [[[1, 1, 1, 1, 1, -1, 1, 1, 1, 1],
            [-1, 1, 1, 1, 1, -1, 1, 1, 1, 1],
            [-1, 1, 1, 1, 1, -1, -1, 1, 1, 1,],
            [-1, 1, 1, 1, 1, -1, -1, -1, -1, 1],
            [1, -1, -1, -1, -1, -1, -1, -1, -1, 1],
            [1, -1, -1, -1, -1, -1, -1, -1, -1, 1],
            [1, -1, -1, -1, -1, 1, 1, 1, 1, 1],
            [1, -1, 1, 1, -1, 1, 1, 1, 1, 1],
            [1, -1, 1, 1, -1, 1, 1, 1, 1, 1],
            [1, -1, -1, 1, -1, -1, 1, 1, 1, 1]],

            [[-1, -1, 1, 1, 1, 1, 1, -1, -1, -1],
             [-1, -1, 1, 1, 1, 1, -1, -1, -1, -1],
             [-1, -1, 1, 1, 1, 1, -1, -1, -1, -1],
             [-1, -1, 1, 1, 1, -1, -1, 1, -1, -1],
             [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
             [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
             [-1, -1, 1, -1, -1, 1, 1, 1, -1, -1],
             [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
             [-1, -1, -1, -1, 1, 1, 1, 1, -1, -1],
             [-1, -1, -1, 1, 1, 1, 1, 1, -1, -1]],

             [[-1, -1, 1, 1, 1, 1, 1, -1, -1, -1],
             [-1, -1, 1, 1, 1, 1, -1, -1, -1, -1],
             [-1, -1, 1, 1, 1, 1, -1, -1, -1, -1],
             [-1, -1, 1, 1, 1, -1, -1, 1, -1, -1],
             [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
             [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
             [-1, -1, 1, -1, -1, 1, 1, 1, -1, -1],
             [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
             [-1, -1, -1, -1, 1, 1, 1, 1, -1, -1],
             [-1, -1, -1, 1, 1, 1, 1, 1, -1, -1]],

             [[-1, -1, 1, 1, 1, 1, 1, -1, -1, -1],
             [-1, -1, 1, 1, 1, 1, -1, -1, -1, -1],
             [-1, -1, 1, 1, 1, 1, -1, -1, -1, -1],
             [-1, -1, 1, 1, 1, -1, -1, 1, -1, -1],
             [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
             [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
             [-1, -1, 1, -1, -1, 1, 1, 1, -1, -1],
             [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
             [-1, -1, -1, -1, 1, 1, 1, 1, -1, -1],
             [-1, -1, -1, 1, 1, 1, 1, 1, -1, -1]],

             [[-1, -1, 1, 1, 1, 1, 1, -1, -1, -1],
             [-1, -1, 1, 1, 1, 1, -1, -1, -1, -1],
             [-1, -1, 1, 1, 1, 1, -1, -1, -1, -1],
             [-1, -1, 1, 1, 1, -1, -1, 1, -1, -1],
             [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
             [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
             [-1, -1, 1, -1, -1, 1, 1, 1, -1, -1],
             [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
             [-1, -1, -1, -1, 1, 1, 1, 1, -1, -1],
             [-1, -1, -1, 1, 1, 1, 1, 1, -1, -1]]]

#1 пример - "шумная" собака, 2-5 - разные варианты "шумной" буквы И
examples_with_noise = [[[1, 1, 1, 1, 1, -1, 1, -1, 1, 1],
                        [-1, 1, 1, 1, 1, -1, 1, 1, 1, 1],
                        [-1, 1, 1, 1, 1, -1, -1, 1, 1, 1],
                        [-1, 1, 1, -1, 1, -1, -1, -1, -1, 1],
                        [1, -1, -1, -1, -1, -1, -1, -1, -1, 1],
                        [1, -1, -1, -1, -1, -1, -1, -1, -1, 1],
                        [1, 1, -1, -1, -1, 1, 1, 1, 1, -1],
                        [1, -1, 1, -1, -1, 1, 1, 1, 1, 1],
                        [1, -1, 1, 1, -1, 1, 1, 1, 1, 1],
                        [1, -1, -1, 1, -1, -1, 1, 1, 1, 1]],

                       [[-1, -1, 1, 1, 1, 1, 1, -1, -1, -1],
                        [-1, -1, 1, 1, 1, 1, -1, 1, -1, -1],
                        [-1, 1, 1, -1, 1, 1, -1, -1, -1, 1],
                        [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1],
                        [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
                        [-1, -1, 1, 1, -1, -1, 1, 1, -1, -1],
                        [-1, -1, -1, -1, -1, -1, 1, 1, -1, -1],
                        [-1, -1, -1, -1, -1, 1, 1, 1, 1, -1],
                        [-1, -1, -1, 1, -1, 1, 1, 1, -1, -1],
                        [-1, -1, -1, 1, 1, 1, 1, 1, -1, -1]],

                       [[-1, 1, 1, 1, 1, 1, 1, -1, -1, -1],
                        [1, -1, 1, 1, 1, 1, -1, 1, -1, -1],
                        [-1, 1, -1, 1, 1, -1, -1, -1, -1, -1],
                        [-1, -1, 1, -1, 1, -1, 1, 1, -1, 1],
                        [-1, -1, 1, -1, 1, -1, 1, 1, -1, -1],
                        [1, -1, -1, 1, -1, -1, -1, 1, -1, -1],
                        [-1, -1, 1, -1, -1, 1, 1, 1, -1, -1],
                        [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
                        [-1, -1, -1, -1, 1, -1, -1, 1, -1, 1],
                        [-1, -1, -1, 1, -1, 1, 1, 1, 1, -1]],

                       [[-1, -1, -1, 1, -1, 1, 1, -1, -1, -1],
                        [-1, -1, 1, -1, 1, 1, -1, -1, -1, -1],
                        [1, 1, 1, 1, 1, -1, -1, -1, -1, -1],
                        [-1, 1, 1, 1, -1, 1, -1, 1, -1, 1],
                        [-1, -1, 1, 1, 1, -1, 1, -1, -1, 1],
                        [1, 1, 1, 1, -1, -1, 1, 1, 1, 1],
                        [1, 1, 1, -1, -1, -1, 1, 1, -1, -1],
                        [-1, 1, 1, -1, 1, 1, -1, -1, -1, -1],
                        [-1, 1, -1, 1, 1, 1, 1, 1, -1, -1],
                        [-1, 1, 1, 1, 1, 1, 1, 1, 1, -1]],

                       [[-1, -1, 1, 1, -1, -1, -1, 1, -1, -1],
                        [1, 1, 1, -1, 1, -1, -1, 1, 1, -1],
                        [1, 1, 1, -1, -1, 1, 1, -1, -1, -1],
                        [-1, 1, 1, 1, 1, 1, -1, 1, 1, -1],
                        [-1, -1, 1, 1, -1, -1, 1, 1, 1, -1],
                        [1, -1, 1, 1, -1, -1, -1, -1, -1, 1],
                        [-1, 1, -1, -1, 1, 1, -1, -1, -1, -1],
                        [-1, -1, -1, -1, 1, 1, 1, -1, -1, -1],
                        [1, 1, -1, -1, 1, 1, -1, 1, 1, -1],
                        [1, 1, -1, -1, 1, 1, 1, -1, 1, 1]]]

network = HopfieldNetwork(num_neurons=10)
network.train(examples)

#проверка работы на "зашумленных" примерах
for i, example in enumerate(examples_with_noise):
    total_matches = 0
    print("Шумный пример ", i+1)
    for j, noisy_pattern in enumerate(example):
        #восстановленный паттерн
        recalled_pattern = network.recall(noisy_pattern)
        print("Восстановленный паттерн: ", recalled_pattern)
        for k in range(len(recalled_pattern)):
            #проверяем совпадения
            if recalled_pattern[k] == examples[i][j][k]:
                total_matches += 1
    print(f"Итоговая точность: {total_matches}%")
    print()
